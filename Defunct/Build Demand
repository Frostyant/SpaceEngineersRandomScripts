//Build Demand//

// Block names (editable)//
//const string TXT0_NAME = "info" ;
//Info Should be of the form : Ship ID $ Name of Laser Antenna 1 % Name of Laser Antenna 2 % ... $ other stuff
//const string TXT1_NAME = "orders";
//Orders is Assumed to be of the form : Sender ID; Receiver ID; Order Type; other info 0; other info 1 etc... 
const string TXT2_NAME = "production";
//production is assumed to be of the form : Ship class ID, Ship model ID, cost in bullet proof glass, cost in computers etc... (alphabetical orders EXCLUDING turret ammunitions); Ship class ID...
//This may change if  components are added through modding or updates in which case add them at the END of the ordering, see conventions file for order.
const string TXT3_NAME = "current_work";
//This stores the production queue (the end queue will be removed when the new ship is about to detach)
//current production is assumed to be of the form : Ship Model ID 01; Ship Model ID 02; etc
const string TXT4_NAME = "current_answered_demands";
//List of demands being answered as we speek
//current answered demands is assumed to be of the form : demand in bullet proof glass; demand in computers etc...
const string TXT5_NAME = "current_unanswered_demands";
//current unanswered demands is assumed to be of the form : demand in bullet proof glass; demand in computer etc...;true/false
//last bit is to check how often we executed this script


//Block Variables //
IMyTimerBlock timer0;
IMyTimerBlock timer1;
IMyTextPanel txt0; 
IMyTextPanel txt1;
IMyTextPanel txt2;

//Classes//
public class IMyPotentialShip{

	//Fields//

	public float[] costs;
	public string class_ID;
	public string model_ID;

	//Constructors//

	public IMyPotentialShip(){

		costs = null;

		class_ID = null;

		model_ID = null;

	}

	public IMyPotentialShip(string[] txt2_ref){

		class_ID = txt2_ref[0];

		model_ID = txt2_ref[1];

		costs = new float[txt2_ref.Length];

		for( int it = 2; it < txt2_ref.Length; it++){

			costs[it - 2] = Convert.ToSingle(txt2_ref[it]);
			
		}
	}
}

//Functions//

public string GetRaw(IMyTextPanel txt){   
   
	string output;   
   
	output=txt.GetPublicText();   
   
	return output;   
}   
   
   
   
   
   
public string[] GetRef(IMyTextPanel txt,char sep){   
   
	string raw;  
   
	raw=GetRaw(txt);   
   
	string[] output =raw.Split(sep);   
   
	return output;   
   
}

public void Execute(string TIMER_NAME){

	IMyTimerBlock timer = GridTerminalSystem.GetBlockWithName(TIMER_NAME) as IMyTimerBlock;

	if(timer != null){

		//False find what is the variable type of the actions.

		ITerminalAction start;

		start=timer.GetActionWithName("Start");

		start.Apply(timer);
	}
}





public void Main(){
	//Initialising Variables//

	//IMyBeacon bacon = GridTerminalSystem.GetBlockWithName("Bacon") as IMyBeacon;

	//bacon.SetCustomName("WORKS");
  
	//IMyTextPanel txt0 = GridTerminalSystem.GetBlockWithName(TXT0_NAME) as IMyTextPanel;   

	//IMyTextPanel txt1 = GridTerminalSystem.GetBlockWithName(TXT1_NAME) as IMyTextPanel;

	IMyTextPanel txt2 = GridTerminalSystem.GetBlockWithName(TXT2_NAME) as IMyTextPanel;

	IMyTextPanel txt3 = GridTerminalSystem.GetBlockWithName(TXT3_NAME) as IMyTextPanel;

	IMyTextPanel txt4 = GridTerminalSystem.GetBlockWithName(TXT4_NAME) as IMyTextPanel;

	IMyTextPanel txt5 = GridTerminalSystem.GetBlockWithName(TXT5_NAME) as IMyTextPanel;


/*

	//Extracting Info//

	string[] txt0_ref;

	txt0_ref = GetRef(txt0,'$');





	//Extracting orders//

	string[] txt1_ref;

	txt1_ref = GetRef(txt1,';');

*/




	//Extracting production//

	string[] txt2_ref;

	txt2_ref = GetRef(txt2,';');



	//Extracting current production//

	string[] txt3_ref;

	txt3_ref = GetRef(txt3,';');



	//Extracting current answered demands//

	string[] txt4_ref;

	txt4_ref = GetRef(txt4,';');



	//Extracting current unanswered demands//

	string[] txt5_ref;

	txt5_ref = GetRef(txt5,';');



	//Find Current Productions//

	string[] intel;

	intel = new string[1];

	intel[0] = "NaN";

	string ID;

	for(int it = 0 ; it < txt2_ref.Length ; it ++){

		intel = txt2_ref[it].Split(',');

		if(intel[1] == txt3_ref[0]){
			break;
		}

		intel[0] = "NaN";
	}

	if(intel[0] != "NaN"){

		//Getting current product//

		IMyPotentialShip product = new IMyPotentialShip(intel);


		//Comparing current answered demand to prices//

		bool AllDone;

		AllDone = true;

		float[] remainder;

		remainder = new float[txt4_ref.Length];

		float temp;

		for(int it = 0 ; it < txt4_ref.Length ; it ++){

			temp  = Convert.ToSingle(txt4_ref[it]);

			if(temp < product.costs[it]){

				AllDone = false;

				remainder[it] = product.costs[it] - temp;
			}else{
				remainder[it] = 0;
			}
		}


		if(AllDone == false){
		//IF remainder non zeroe set that into unanswered//

		 string remainder_memory;

		 remainder_memory = string.Join(";",remainder);

		 //Verifying if there are already unanswered demands

		 if(txt5_ref[txt4_ref.Length] == "true"){

		 	//Save new demands//

		 	txt5.WritePublicText(remainder_memory + ";" + "true");

		 	//Execute Build Internal-Trade Demand script//

		 	Execute("BITD");

		 }else{

		 	//Save new demands//

		 	txt5.WritePublicText(remainder_memory + ";" + "true");

		 	//Execute Build External-Trade Demand search script//

		 	Execute("BETD");
		 }



		}







	}


}