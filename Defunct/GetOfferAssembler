//Get Offer Assembler//

//This programm amounts to setting up a transfer message script to the refinery

//this program/module needs :
//the "info" text file
//the "orders" text file
//the send message "SM" timer block
//the memory for all known refineries in the "RFS_memory" text file
//memory is of format : Ship ID 01 , GPS of Ship ID 01 (, status) ; Ship ID 02 , GPS of Ship ID 02  (, status); etc..

//Block names (editable) //
const string TXT0_NAME = "info";
//Ship ID $ Name of Laser Antenna 1 % Name of Laser Antenna 2 % ... $ Commander ID $ Commander GPS$Product ID$Costs per unit
//costs per unit in format : Amount of ID 0$ Amount of ID 1$...
const string TXT1_NAME = "orders";
//Shipyard orders :Shipyard ID; Assembler ID ;GO; Component ID; Amount
const string TXT2_NAME = "work_queue";
//text panel 2 is a collection of infos in format from TXT1 separated by a "#"



//Functions//

public string GetRaw(IMyTextPanel txt){   
   
	string output;   
   
	output=txt.GetPublicText();   
   
	return output;   
}   
   
   
public string[] GetRef(IMyTextPanel txt,char sep){   
   
	string raw;  
   
	raw=GetRaw(txt);   
   
	string[] output =raw.Split(sep);   
   
	return output;   
   
}


public void Execute(string TIMER_NAME){

	IMyTimerBlock timer = GridTerminalSystem.GetBlockWithName(TIMER_NAME) as IMyTimerBlock;

	if(timer != null){

		//False find what is the variable type of the actions.

		ITerminalAction start;

		start=timer.GetActionWithName("Start");

		start.Apply(timer);
	}
}



public string[] GetMemory(string MEM_TYPE){

	//Initialising//

	IMyTextPanel txt0 = GridTerminalSystem.GetBlockWithName(MEM_TYPE + "_memory") as IMyTextPanel;


	//Extracting memory//

	string[] txt0_ref;

	//CHECK THIS LINE !//
	txt0_ref = GetRef(txt0,';');


	//Returning Value//

	return txt0_ref;
}


public string[] ExctractFirstSimpleMemory(string MEM_TYPE){
	//Exctracts first element in memory of format info 00,info 01;etc

	string[] synapses;

	string[] output;

	synapses = GetMemory(MEM_TYPE);

	output = synapses[0].Split(',');

	return output;
}

public float[] MassStringToFloat(string[] input){
	//Self-Explanatory//

	//okay lists would probably have been better but we are already using arrays EVERYWHERE

	float[] output;

	output = new float[input.Length];

	for(int it = 0; it <= input.Length-1; it++){
		output[it] = float.Parse(input[it]);
	}

	return output;
}

public float[] MassMultiply(float[] factors,float factor){
	//Multiplies each elemnt in an array by a single factor

	//okay lists would probably have been better but we are already using arrays EVERYWHERE
	float[] output;

	output = new float[factors.Length];

	for(int it = 0; it <= factors.Length-1; it++){
		output[it] = factors[it] * factor;
	}

	return output;
}

public string[] MassFloatToString(float[] input){

	string[] output;
	
	output = new string[input.Length];

	for(int it = 0; it <= input.Length-1; it++){
		output[it] = Convert.ToString(input[it]);
	}

	return output;
}

public string[] RemoveZeroeCost(string[] input){
	string[] output;

	output = new string[input.Length];

	//Takes the input array
	//-removes ALL elements with 0 cost
	//-saves them along with their original position in this format : pos,cost
	int it0 = 0;

	for(int it = 0; it <= input.Length-1; it++){
		if(input[it] != "0"){
			output[it0] = Convert.ToString(it) + "," + input[it];

			it0++;
		}else{
			//skip this output
		}
	}

	return output;
}


public string GOShipyardToAssembler(string[] txt0_ref, string[] txt1_ref, string[] memory,int stage){
	//Stage is for if we have already contacted the refinery once we go to the next one
	//txt0 = info & txt1 = orders
	//Basically We need to Turn the old orders from the shipyard into orders for the Refinery
	//Shipyard orders :Shipyard ID; Assembler ID ;GO; Component ID; Amount
	//Refinery orders :Assembler ID; Refinery ID ;GO; Ressource ID 0, Ressource ID 1,...; Amount of ID 0, Amount of ID 1,...

	//Note that info for assemblers CONTAINS the intel we happen to need as info is of the form :
	//Ship ID $ Name of Laser Antenna 1 % Name of Laser Antenna 2 % ... $ Commander ID $ Commander GPS$Product ID$Costs per unit
	//costs per unit in format : Amount of ID 0% Amount of ID 1%...

	string output;

	float[] costs;

	string[] costs_string;

	string[] relevant_memory;

	//We need to determin costs

	//We need to get costs per unit from info then turn it into a float
	costs = MassStringToFloat(txt0_ref[5].Split('%'));

	

	//txt1_ref[3] is the amount asked
	costs = MassMultiply(costs,float.Parse(txt1_ref[3]));

	// NOTE : orders array is NOT in the correct order (there is stuff in between)
	costs_string = MassFloatToString(costs);

	IMyBeacon bacon = GridTerminalSystem.GetBlockWithName("bacon") as IMyBeacon;


	costs_string = RemoveZeroeCost(costs_string);

	bacon.SetCustomName(string.Join( ";" ,costs_string ));
	

	relevant_memory = memory[stage].Split(',');


	

	//First we need our ID then the refinery ID THEN the order type and finally the costs
	output = relevant_memory[1] + "&"+ txt1_ref[1] + ";" + relevant_memory[0] + ";" + "GO" + ";" +  string.Join(";",costs_string);
	
	return output;
}

public void AddToWorkQueue(IMyTextPanel txt1, IMyTextPanel txt2){
	//txt1 is orders
	//txt2 is the queue
	//saves orders and adds it to queue

	txt2.WritePublicText(GetRaw(txt2) + "#" + GetRaw(txt1));

}













public void Main(string FromQueue){

	//Initialising//

	IMyTextPanel txt0 = GridTerminalSystem.GetBlockWithName(TXT0_NAME) as IMyTextPanel;

	IMyTextPanel txt1 = GridTerminalSystem.GetBlockWithName(TXT1_NAME) as IMyTextPanel;

	IMyTextPanel txt2 = GridTerminalSystem.GetBlockWithName(TXT2_NAME) as IMyTextPanel;

	//temporary will fix later but for now stage is ALWAYS 0
	int stage = 0;



	
	//Extracting info//

	string[] txt0_ref;

	txt0_ref = GetRef(txt0,'$');
	



	//Extracting orders//

	string[] txt1_ref;

	txt1_ref = GetRef(txt1,';');


	//Extracting work//

	string[] txt2_raw;

	txt2_raw = GetRaw(txt2);


	if(FromQueue == "false"){
		AddToWorkQueue(txt1,txt2);
	}

	if(txt2_raw == null && FromQueue == "false"){
		//Getting Memory//

		string[] memory;

		memory = GetMemory("RFS");


		//Generating New orders//
		//Remember this is in the awkward send message format
		//so GPS & Receiver ID; order type; other info 0;...



		string orders;
		orders = GOShipyardToAssembler(txt0_ref,txt1_ref,memory,stage);




		//Saving New Orders//

		txt1.WritePublicText(orders);




		//Executing Send Message//

		Execute("SM");
	}else{
		
	}
	

	}